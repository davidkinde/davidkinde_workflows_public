var s = /* @__PURE__ */ ((e) => (e[e.accept = 0] = "accept", e[e.deny = 1] = "deny", e))(s || {}), i = /* @__PURE__ */ ((e) => (e.UserTokenGeneration = "user:tokens_generation", e.M2MTokenGeneration = "m2m:tokens_generation", e))(i || {});
const o = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.idToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
}, c = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.accessToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
}, a = {
  get(e, n, t) {
    return Reflect.get(e, n.toString(), t);
  },
  set(e, n, t) {
    return kinde.idToken.setCustomClaim(n, t), Reflect.set(e, n, t);
  }
};
function m() {
  const e = kinde.idToken.getCustomClaims();
  return new Proxy(e, o);
}
function r() {
  const e = kinde.accessToken.getCustomClaims();
  return new Proxy(e, c);
}
function u() {
  const e = kinde.accessToken.getCustomClaims();
  return new Proxy(e, a);
}
function d(e) {
  return kinde.env.get(e);
}
function k(e) {
  kinde.auth.denyAccess(e);
}
export {
  s as WorkflowResult,
  i as WorkflowTrigger,
  r as accessTokenCustomClaims,
  k as denyAccess,
  d as getEnvironmentVariable,
  m as idTokenCustomClaims,
  u as m2mTokenClaims
};
