"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});var i=(e=>(e[e.accept=0]="accept",e[e.deny=1]="deny",e))(i||{}),o=(e=>(e.UserTokenGeneration="user:tokens_generation",e.M2MTokenGeneration="m2m:tokens_generation",e))(o||{});const s={get(e,n,t){return Reflect.get(e,n.toString(),t)},set(e,n,t){return kinde.idToken.setCustomClaim(n,t),Reflect.set(e,n,t)}},a={get(e,n,t){return Reflect.get(e,n.toString(),t)},set(e,n,t){return kinde.accessToken.setCustomClaim(n,t),Reflect.set(e,n,t)}},r={get(e,n,t){return Reflect.get(e,n.toString(),t)},set(e,n,t){return kinde.idToken.setCustomClaim(n,t),Reflect.set(e,n,t)}};function m(){if(!kinde.idToken)throw new Error("IdToken binding not available");const e=kinde.idToken.getCustomClaims();return new Proxy(e,s)}function c(){if(!kinde.accessToken)throw new Error("accessToken binding not available");const e=kinde.accessToken.getCustomClaims();return new Proxy(e,a)}function k(){if(!kinde.m2mToken)throw new Error("m2mToken binding not available");const e=kinde.m2mToken.getCustomClaims();return new Proxy(e,r)}function l(e){return kinde.env.get(e)}function d(e){kinde.auth.denyAccess(e)}exports.WorkflowResult=i;exports.WorkflowTrigger=o;exports.accessTokenCustomClaims=c;exports.denyAccess=d;exports.getEnvironmentVariable=l;exports.idTokenCustomClaims=m;exports.m2mTokenClaims=k;
